import type { Plugin } from 'vite'
import fs from 'node:fs'

/**
 * @module sprite_types
 * @group Vite
 * @version 1.0.0
 * @remarks
 * Vite plugin that regenerates icon types from svg sprite files on file save.
 *
 * @param [options] - The options for the plugin.
 * @param [options.output_path] - The path to output the generated files to. Defaults to the same directory as the sprite file.
 * @param [options.json_schema] - Whether to generate a json schema for the sprite. Defaults to false.
 *
 * @example
 * ```ts title=vite.config.ts
 * import { sprite_types } from 'kitto/vite'
 *
 * export default defineConfig({
 *   plugins: [sprite_types()]
 * })
 * ```
 */

function equal<T>(a: Set<T>, b: Set<T>): boolean {
	if (a.size !== b.size) return false
	for (const item of a) if (!b.has(item)) return false
	return true
}

const name = 'vite-sprite-types'

function msg(text: string) {
	return `\x1b[33m[${name}]\x1b[0m ${text}`
}

function log(method: 'log' | 'warn' | 'error', ...args: unknown[]) {
	console[method](msg(args[0] as string), ...args.slice(1))
}

const logger = {
	log: (...args: unknown[]) => log('log', ...args),
	warn: (...args: unknown[]) => log('warn', ...args),
	error: (...args: unknown[]) => log('error', ...args)
}

interface Options {
	output_path?: string
	json_schema?: boolean
}

export function sprite_types({ output_path, json_schema }: Options = {}): Plugin {
	// ensure output_path ends with a slash
	output_path = output_path?.replace(/\/?$/, '/') ?? undefined

	return {
		name,
		configureServer(server) {
			server.watcher.on('change', async changed_path => {
				if (!changed_path.endsWith('.svg')) return

				const id = changed_path.split('/').pop()
				if (!id) return logger.warn('No id found in path:', changed_path)

				const file_contents = fs.readFileSync(changed_path, 'utf8')
				const matches = [...file_contents.matchAll(/<symbol[^>]+id="([^"]+)"/g)]
				const ids = matches.map(m => m[1])

				if (!ids.length) return

				const file_path = changed_path.replace(id, '')
				const dest = output_path ?? file_path

				const filename_ts = id.replace('.svg', '.ts')

				// check if the file already exists
				try {
					const { icon_names: existing_icon_names } = await import(dest + filename_ts)

					// if the file already exists and the ids are the same, skip
					if (equal(existing_icon_names, new Set(ids))) {
						logger.log('No changes to sprite.ts')
						return
					}
				} catch {
					// file doesn't exist yet, that's fine
				}

				// generate the output files
				const now = new Date().toISOString()

				const header = `/**
 * This file was auto-generated by \`sprite_types\` on ${now}
 * DO NOT MANUALLY EDIT THIS FILE.
 */
`
				const sprite_output = `${header}

export const icon_names = new Set(${JSON.stringify(ids)} as const)

export type IconName = ${ids.map(id => `"${id}"`).join(' | ')}

`

				// write the output files
				fs.writeFileSync(dest + filename_ts, sprite_output)
				logger.log(`Generated ${dest + filename_ts}`)

				// if json_schema is not enabled, skip the json schema
				if (!json_schema) return

				const filename_json = id.replace('.svg', '.json')

				const schema = {
					$schema: 'http://json-schema.org/draft-07/schema#',
					title: id,
					type: 'string',
					enum: Array.from(ids)
				}

				// write the json schema
				fs.writeFileSync(dest + filename_json, JSON.stringify(schema, null, 2))
				logger.log(`Generated ${dest + filename_json}`)
			})
		}
	}
}
